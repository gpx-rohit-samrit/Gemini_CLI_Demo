name: Debug GitHub Token and Gemini API Key

on:
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: read

jobs:
  debug-tokens:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Debug step 1: Check if tokens exist and their basic properties
      - name: Debug - Check Token Existence
        run: |
          echo "=== GITHUB_TOKEN Debug ==="
          if [ -z "$GITHUB_TOKEN" ]; then
            echo "❌ GITHUB_TOKEN is empty or not set"
          else
            echo "✅ GITHUB_TOKEN is set"
            echo "Token length: ${#GITHUB_TOKEN}"
            echo "Token prefix: ${GITHUB_TOKEN:0:8}..."
          fi

          echo ""
          echo "=== GEMINI_API_KEY Debug ==="
          if [ -z "$GEMINI_API_KEY" ]; then
            echo "❌ GEMINI_API_KEY is empty or not set"
          else
            echo "✅ GEMINI_API_KEY is set"
            echo "Key length: ${#GEMINI_API_KEY}"
            echo "Key prefix: ${GEMINI_API_KEY:0:8}..."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      # Debug step 2: Test GitHub API access
      - name: Debug - Test GitHub API Access
        run: |
          echo "Testing GitHub API access..."

          # Test basic API access
          response=$(curl -s -w "%{http_code}" -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/user)

          http_code="${response: -3}"
          response_body="${response%???}"

          echo "HTTP Status Code: $http_code"

          if [ "$http_code" = "200" ]; then
            echo "✅ GitHub API access successful"
            echo "User info: $(echo "$response_body" | jq -r '.login // "unknown"')"
          else
            echo "❌ GitHub API access failed"
            echo "Response: $response_body"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Debug step 3: Test repository access
      - name: Debug - Test Repository Access
        run: |
          echo "Testing repository access..."

          repo_response=$(curl -s -w "%{http_code}" -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }})

          http_code="${repo_response: -3}"
          response_body="${repo_response%???}"

          echo "HTTP Status Code: $http_code"

          if [ "$http_code" = "200" ]; then
            echo "✅ Repository access successful"
            echo "Repository: $(echo "$response_body" | jq -r '.full_name // "unknown"')"
          else
            echo "❌ Repository access failed"
            echo "Response: $response_body"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Debug step 4: Check GitHub CLI access
      - name: Debug - Test GitHub CLI
        run: |
          echo "Testing GitHub CLI access..."

          # Test gh CLI
          if gh auth status; then
            echo "✅ GitHub CLI authentication successful"
            gh api user --jq '.login' | xargs -I {} echo "Authenticated as: {}"
          else
            echo "❌ GitHub CLI authentication failed"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Debug step 5: List available permissions
      - name: Debug - Check Token Permissions
        run: |
          echo "Checking token permissions..."

          # Get token info (this might not work with GITHUB_TOKEN, but worth trying)
          token_info=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/applications/grants)

          echo "Token info response: $token_info"

          # Check what we can access
          echo ""
          echo "Testing different API endpoints:"

          # Test issues access
          issues_response=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/issues)
          echo "Issues access (GET): HTTP $issues_response"

          # Test pull requests access
          pr_response=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/pulls)
          echo "Pull requests access (GET): HTTP $pr_response"

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Debug step 6: Test Gemini API Key (if provided)
      - name: Debug - Test Gemini API Key
        if: env.GEMINI_API_KEY != ''
        run: |
          echo "Testing Gemini API key..."

          # Test a simple API call to Gemini
          response=$(curl -s -w "%{http_code}" \
            -H "Content-Type: application/json" \
            -X POST \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=$GEMINI_API_KEY" \
            -d '{
              "contents": [{
                "parts": [{
                  "text": "Hello, this is a test. Please respond with just: API key works"
                }]
              }]
            }')

          http_code="${response: -3}"
          response_body="${response%???}"

          echo "HTTP Status Code: $http_code"

          if [ "$http_code" = "200" ]; then
            echo "✅ Gemini API key is working"
          else
            echo "❌ Gemini API key test failed"
            echo "Response: $response_body"
          fi
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
