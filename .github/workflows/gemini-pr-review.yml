name: '🧐 Gemini Pull Request Review'

on:
  pull_request:
    types:
      - 'opened'
      - 'reopened'
      - 'synchronize'
  issue_comment:
    types:
      - 'created'
  pull_request_review_comment:
    types:
      - 'created'
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to review'
        required: true
        type: 'number'

concurrency:
  group: '${{ github.workflow }}-${{ github.head_ref || github.ref }}'
  cancel-in-progress: true

defaults:
  run:
    shell: 'bash'

permissions:
  contents: 'read'
  id-token: 'write'
  issues: 'write'
  pull-requests: 'write'
  statuses: 'write'

jobs:
  review-pr:
    if: |
      github.event_name == 'pull_request' ||
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'issue_comment' &&
        github.event.issue.pull_request &&
        contains(github.event.comment.body, '@gemini-cli /review')
      ) ||
      (
        github.event_name == 'pull_request_review_comment' &&
        contains(github.event.comment.body, '@gemini-cli /review')
      )
    timeout-minutes: 5
    runs-on: 'ubuntu-latest'

    steps:
      - name: 'Checkout PR code'
        uses: 'actions/checkout@v4'

      - name: 'Generate GitHub App Token'
        id: 'generate_token'
        uses: 'actions/create-github-app-token@v1'
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'

      - name: 'Get PR details'
        id: 'get_pr'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          EVENT_NAME: '${{ github.event_name }}'
          WORKFLOW_PR_NUMBER: '${{ github.event.inputs.pr_number }}'
          COMMENT_BODY: '${{ github.event.comment.body }}'
          PR_NUMBER: '${{ github.event.issue.number || github.event.pull_request.number }}'
        run: |
          set -euo pipefail

          if [[ "${EVENT_NAME}" = "workflow_dispatch" ]]; then
            PR_NUMBER="${WORKFLOW_PR_NUMBER}"
          fi

          echo "pr_number=${PR_NUMBER}" >> "${GITHUB_OUTPUT}"
          echo "pr_data=$(gh pr view "${PR_NUMBER}" --json title,body,additions,deletions,changedFiles,baseRefName,headRefName)" >> "${GITHUB_OUTPUT}"

          CHANGED_FILES="$(gh pr diff "${PR_NUMBER}" --name-only)"
          {
            echo "changed_files<<EOF"
            echo "${CHANGED_FILES}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

          if [[ "${EVENT_NAME}" == "issue_comment" || "${EVENT_NAME}" == "pull_request_review_comment" ]]; then
            ADDITIONAL_INSTRUCTIONS="$(
              echo "${COMMENT_BODY}" | sed 's/.*@gemini-cli \/review//' | xargs
            )"
            echo "additional_instructions=${ADDITIONAL_INSTRUCTIONS}" >> "${GITHUB_OUTPUT}"
          fi


      - name: 'Run Gemini PR Review'
        uses: 'google-github-actions/run-gemini-cli@v1' # Using the recommended version
        id: 'gemini_pr_review'
        env:
          GEMINI_API_KEY: '${{ secrets.GEMINI_API_KEY }}' # The key is now explicitly set as an environment variable
        with:
          prompt: |
            ## Role
            You are an expert code reviewer. You have access to tools to gather PR information and perform the review on GitHub. Use the available tools to gather information; do not ask for information to be provided.

            ## Requirements
            1. All feedback must be left on GitHub.
            2. Any output that is not left in GitHub will not be seen.

            ## Steps
            Start by running these commands to gather the required data:
            1. Run: echo "${{ github.repository }}" to get the github repository in <OWNER>/<REPO> format
            2. Run: echo "${{ steps.get_pr.outputs.pr_data }}" to get PR details (JSON format)
            3. Run: echo "${{ steps.get_pr.outputs.changed_files }}" to get the list of changed files
            4. Run: echo "${{ steps.get_pr.outputs.pr_number }}" to get the PR number
            5. Run: echo "${{ steps.get_pr.outputs.additional_instructions }}" to see any specific review instructions from the user
            6. Run: gh pr diff "${{ steps.get_pr.outputs.pr_number }}" to see the full diff and reference Context section to understand it
            7. For any specific files, use: cat filename, head -50 filename, or tail -50 filename
            8. If ADDITIONAL_INSTRUCTIONS contains text, prioritize those specific areas or focus points in your review. Common instruction examples: "focus on security", "check performance", "review error handling", "check for breaking changes"

            ## Guideline
            ### Core Guideline(Always applicable)
            ... (The rest of your extensive prompt goes here) ...

            ## Final Instructions
            Remember, you are running in a VM and no one reviewing your output. Your review must be posted to GitHub using the MCP tools to create a pending review, add comments to the pending review, and submit the pending review.

          settings: |-
            {
              "maxSessionTurns": 20,
              "mcpServers": {
                "github": {
                  "command": "docker",
                  "args": [
                    "run",
                    "-i",
                    "--rm",
                    "-e",
                    "GITHUB_PERSONAL_ACCESS_TOKEN",
                    "ghcr.io/github/github-mcp-server"
                  ],
                  "includeTools": [
                    "create_pending_pull_request_review",
                    "add_comment_to_pending_review",
                    "submit_pending_pull_request_review"
                  ],
                  "env": {
                    "GITHUB_PERSONAL_ACCESS_TOKEN": "${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}"
                  }
                }
              },
              "coreTools": [
                "run_shell_command(echo)",
                "run_shell_command(gh pr view)",
                "run_shell_command(gh pr diff)",
                "run_shell_command(cat)",
                "run_shell_command(head)",
                "run_shell_command(tail)",
                "run_shell_command(grep)"
              ],
              "telemetry": {
                "enabled": false,
                "target": "gcp"
              }
            }

      - name: 'Post PR review failure comment'
        if: |
          ${{ failure() && steps.gemini_pr_review.outcome == 'failure' }}
        uses: 'actions/github-script@v6'
        with:
          github-token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.get_pr.outputs.pr_number }},
              body: 'There is a problem with the Gemini CLI PR review. Please check the [action logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.'
            })
